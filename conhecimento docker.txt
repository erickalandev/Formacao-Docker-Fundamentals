                         conhecimento e instalação do docker

- link: https://docs.docker.com/engine/install/ubuntu/
- usar o script docker e copiar os comandos para instalar
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh ./get-docker.sh --dry-run

conhecimento:

Virtualização -> utiliza software para criar uma camada de abstração sobre o hardware de um unico computador (procesaadores, memoria, armazenamento, etc) sejam divididos em varios computadores virtuais.

Container -> são uma tecnologia usada para reunir um aplicativo e todos os seus arquivos necessarios em um ambiente de tempo de execução. Como uma unidade, o container pode ser facilmente movido e executado em qualquer sistema operacional, em qualquer contexto.

Microsserviços -> são uma abordagem arquitetonica e organizacional do desenvolvimento de software na qual o software consiste em pequenos serviços independentes que se comunicam usando APIs bem definidas. Esses serviços pertencem a pequenas equipes autossuficientes.

Cliente-Servidor -> é um modelo de estrutura de aplicação que distribui as tarefas e cargas de trabalho entre os fonecedores de um recurso ou serviço, designadoscomo servidores, e os requerentes dos serviços, designados como clientes.

			montando mount um local de armazenamento

Mount (tipo bind) é o volume onde é armazenados os dados do conteiner para saber onde fica basta dar o comando 'docker inspect mysql-A' abrirá as informações daquele conteiner, ao subir e procurar por 'Mounts' lá mostra o caminho da pasta onde é gravado as informações daquele conteiner

		tipos de mount bind, named, dockerfile volume

bind são as montagens apenas para vincular um determinado diretório ou arquivo do host dentro do coneteiner:
	comando utilizado - 'docker run -v /hostdir:/conteinerhost mysql'
ele é preciso criar um diretorio e assim iniciar

named são volumes criados manualmente com o comando:
	'docker volume create nome-do-volume'
eles são criados em '/var/lib/docker/volumes' e podem ser referenciados apenas por seu nome
Digamos que seja criado um volume chamado "mysql_data", o comando seria:
	'docker run -v mysql_data:/containerdir mysql'
Ele é iniciado no proprio diretorio do docker

dockerfile são criados pela instrução VOLUME. Esses volumes tambem são criados em '/var/lib/docker/volumes', mas nao tem um determinado nome. O volume é criado ao executar o conteiner e são uteis para salvar dados persistentes. O desenvolvedor pode dizer onde estao os dados importantes e o que deve ser persistente.

			primeiro dockerfile

-o docker file é um arquivo de configurações utilizado para quando for subir uma imagem no conteiner pegar as configurações automátocamente, ao invés de ficar fazendo manualmente sempre for subir a imagem.

exemplo de dockerfile
----------------------------------------------------------
FROM ubuntu

RUN apt update && apt install -y python3 && apt clean 

COPY app.py /opt/app.py

CMD python3 /opt/app.py
------------------------------------------------------------

FROM é a imagem que vou utilizar, no caso foi o 'ubuntu'

RUN é o comando que vai ser executado dentro container 

COPY vai copiar um arquivo app.py que já existia e enviar para o caminho /opt/app.py de dentro do container

CMD  execução do arquivo 'app.py'

após criado e construido ao dar o docker images verá nossa imagem criada, depois é só executar para subir o container com o docker run

		Criando uma imagem personalizada do apache

exemplo de dockerfile
------------------------------------------------------------
FROM debian

RUN apt-get update && apt-get install -y apache2 && apt-get clean

ENV APACHE_LOCK_DIR="/var/lock"
ENV APACHE_PID_FILE="var/run/apache2.pid"
ENV APACHE_RUN_USER="www-data"
ENV APACHE_RUN_GROUP="www-data"
ENV APACHE_LOG_DIR="/var/log/apache2"

ADD site.tar /var/www/html

LABEL description = "Apache webserver 1.0"

VOLUME /var/www/html

EXPOSE 80

ENTRYPOINT ["/usr/sbin/apachectl"]

CMD ["-D", "FOREGROUND"]
-------------------------------------------------------------------

ENV APACHE_LOCK_DIR="/var/lock" -> armazena no local as secções que eu tenho bloqueadas

ENV APACHE_PID_FILE="var/run/apache2.pid" -> especificar o local do arquivo PID (Process ID). serve para iniciar, parar, reiniciar o container se for necessario

ENV APACHE_RUN_USER="www-data" -> especificar o usuário sob o qual o servidor Apache deve ser executado. Garantindo segurança no acesso. Mesmas coisa pro group

ENV APACHE_LOG_DIR="/var/log/apache2" -> especificar o diretorio onde será armazenados os logs do container

ADD site.tar /var/www/html -> envia um arquivo do tipo '.tar' para o caminho desejado e já descompacta, o 'ADD' só funciona para esse tipo de arquivo

VOLUME /var/www/html -> garante que quaisquer alteração feitas nesse diretorio dentro do container serão persistidas e nao excluidas ao parar, reiniciar ou excluir o container

EXPOSE 80 -> porta do servidor web

ENTRYPOINT ["/usr/sbin/apachectl"]-> 
'ENTRYPOINT' -> usado para ao iniciar o container, executar tal comando no servidor apache
'["/usr/sbin/apachectl"]' -> ferramenta de controle de servidor apache, utilizada para iniciar, parar e gerenciar o servidor apache

CMD ["-D", "FOREGROUND"] -> 
'CMD'-> trabalha junto com o ENTRYPOINT, nesse caso ele fornece os argumentos '-D' e 'FOREGROUND' que fazem com que o apache seja executado em primeiro plano para que o processo principal do container continue rodando e o  container nao termine imediatamente, pode ser feito dessa forma tbm 'ENTRYPOINT ["/usr/sbin/apachectl", "-D", "FOREGROUND]'

			registry criando um servidor de imagens

registry -> é um container do docker hub para armazenar as imagens

			docker compose

é uma ferramenta desenvolvida para ajudar a definir e compartilha aplicativos com varios conteineres. com o Compose, pode ser criado um arquivo yaml para definir os serviços e com um único comando. pode rodar todos os containeres ou para-los

arquivo.yaml
---------------------------------------------------
version: '3.8'

services:
  mysqlsrv:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "Senha123"
      MYSQL_DATABASE: "testedb"
    ports:
      - "3306:3306"
    volumes:
      - /data/mysql-C:/var/lib/mysql
    networks:
      - minha-rede

  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - minha-rede

networks:
  minha-rede:
    driver: bridge
---------------------------------------------------------------

o Docker Compose ajuda a definir e compartilhar aplicativos de varios conteineres. Com ele, pode criar um arquivo para definir os serviços presentes em uma aplicação

o arquivo utilizado para a criação do docker compose, deve ser dockercompose.yml
